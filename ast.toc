
(def SymbolOrString (comp Symbol
                          String))

(defprotocol FileLineInfo
  (file-name [ast] "")
  (line-number [ast] 0))

(defprotocol AssertionTest
  (not-assertion? [ast] (maybe ast)))

(extend-type List
  FileLineInfo
  (file-name [l]
    (either (map (first l) file-name)
            ""))
  (line-number [l]
    (either (map (first l) line-number)
            0)))

(extend-type Vector
  FileLineInfo
  (file-name [v]
    (either (map (first v) file-name)
            ""))
  (line-number [v]
    (either (map (first v) line-number)
            0)))

(extend-type HashMap
  FileLineInfo
  (file-name [m]
    (file-name (seq m)))
  (line-number [m]
    (line-number (seq m))))

(deftype block-comment-ast [lines path-to-file line-num]
  (assert (instance? Vector lines))
  (assert (instance? SymbolOrString path-to-file))
  (assert (instance? Integer line-num))

  AssertionTest
  (not-assertion? [_] nothing)

  Stringable
  (string-list [_] (comp (list "<BlockCommentAST")
                         (interpose lines "\n")
                         (list ">")))

  FileLineInfo
  (file-name [_] path-to-file)
  (line-number [_] line-num))

(defn block-comment [path-to-file line-num lines]
  (block-comment-ast lines path-to-file line-num))


(deftype inline-ast [lang result-type txt path-to-file line-num]
  ;; TODO
  ;; (assert (instance? Symbol lang))
  (assert (instance? Maybe result-type))
  (assert (instance? String txt))
  (assert (instance? SymbolOrString path-to-file))
  (assert (instance? Integer line-num))

  Stringable
  (string-list [_] (list "<InlineAST>"))

  FileLineInfo
  (file-name [_] path-to-file)
  (line-number [_] line-num))

(defn inline [lang txt result-type path-to-file line-num]
  (inline-ast lang txt result-type path-to-file line-num))


(deftype params-ast [fixed variadic]
  (assert (instance? Vector fixed))
  (assert (instance? Maybe variadic))

  Stringable
  (string-list [_]
    (comp (list "[")
          (flat-map (interpose fixed " ") string-list)
          (either (map variadic (fn [variadic]
                                  (cons " & " (string-list variadic))))
                  empty-list)
          (list "]")))

  Collection
  (count [_] (count fixed))

  FileLineInfo
  (file-name [_] (file-name fixed))
  (line-number [_] (line-number fixed)))

(defn params
  ([fixed] (params-ast fixed nothing))
  ([fixed variadic] (params-ast fixed variadic)))


(deftype main-ast [params body]
  (assert (instance? params-ast params))
  (assert (instance? Vector body))

  Stringable
  (string-list [_] (comp (list "<MainAST ")
                         (string-list params)
                         (list " ")
                         (string-list body)
                         (list ">")))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn main-fn [params body]
  (main-ast params body))


(deftype declaration-ast [sym]
  ;; TODO
  ;; (assert (instance? Symbol sym))

  Stringable
  (string-list [_] (list "<DeclareAST " (str sym) ">"))

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn declare [sym]
  (declaration-ast sym))


(deftype fn-arity-ast [fn-sym fn-var params doc body]
  (assert (instance? params-ast params))
  (assert (instance? Vector body))

  Stringable
  (string-list [_] (comp (list "(")
                         (string-list params)
                         (list "\n")
                         (flat-map (interpose body "\n") string-list)
                         (list ")")))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn fn-arity [params doc body]
  (fn-arity-ast "" "" params doc body))


(deftype fn-ast [fn-sym arities]
  (assert (instance? Maybe fn-sym))
  (assert (instance? Vector arities))

  Stringable
  (string-list [_]
    (comp (list "(fn " (str (either fn-sym "")) " ")
          (flat-map arities string-list)
          (list  ")")))

  FileLineInfo
  (file-name [_] (file-name arities))
  (line-number [_] (line-number arities)))

(defn fn-expr [sym arities]
  (fn-ast sym arities))


(deftype call-ast [call-target args]
  (assert (instance? Vector args))

  Stringable
  (string-list [_]
    (comp (list "(" (str call-target) " ")
          (flat-map (interpose (seq args) " ") string-list)
          (list ")")))

  FileLineInfo
  (file-name [_] (file-name call-target))
  (line-number [_] (line-number call-target)))

(defn call-expr [[target & args]]
  (call-ast target (vec args)))

(def BindingTarget (comp Symbol
                         params-ast))

(deftype binding-ast [binding val]
  ;; TODO
  ;; (assert (instance? BindingTarget binding))

  Stringable
  (string-list [_]
    (list "<BindingAST " (str binding) " " (str val) ">"))

  FileLineInfo
  (file-name [_] (file-name binding))
  (line-number [_] (line-number binding)))

(defn binding [binding val]
  (binding-ast binding val))


(deftype let-ast [bindings body]
  (assert (instance? Vector bindings))
  (assert (instance? Vector body))

  Stringable
  (string-list [_]
    (list "<LetAST " (str bindings) "\n" (str body) ">"))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn let-expr [bindings body]
  (let-ast bindings body))


(deftype and-ast [clauses]
  (assert (instance? Vector clauses))
  (assert (min-count clauses 1))

  Stringable
  (string-list [_]
    (comp (list "(and ")
          (flat-map (interpose clauses "\n") string-list)
          (list ")")))

  FileLineInfo
  (file-name [_] (extract (map (first clauses) file-name)))
  (line-number [_] (extract (map (first clauses) line-number))))

(defn and-expr [clauses]
  (and-ast clauses))


(deftype or-ast [clauses]
  (assert (instance? Vector clauses))

  Stringable
  (string-list [_]
    (comp (list "<OrAST ")
          (flat-map clauses string-list)
          (list ">")))

  FileLineInfo
  (file-name [_] (extract (map (first clauses) file-name)))
  (line-number [_] (extract (map (first clauses) line-number))))

(defn or-expr [clauses]
  (or-ast clauses))


(deftype either-ast [clause alt]
  Stringable
  (string-list [_]
    (comp (list "(either ")
          (string-list clause)
          (list "\n")
          (string-list alt)
          (list ")")))

  FileLineInfo
  (file-name [_] (file-name clause))
  (line-number [_] (line-number clause)))

(defn either-expr [clause alt]
  (either-ast clause alt))


(deftype min-count-assertion [sym len path]
  ;; TODO
  ;; (assert (instance? Symbol sym))
  (assert (instance? Integer len))
  (assert (instance? List path))

  Stringable
  (string-list [_] (list "<AssertMinCount " (str sym) " " (str len) ">"))

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn assert-min-count [sym len]
  (min-count-assertion sym len empty-list))


(deftype type-assertion [type-sym sym path]
  ;; TODO
  ;; (assert (instance? Symbol type-sym))
  ;; (assert (instance? Symbol sym))
  (assert (instance? List path))

  Stringable
  (string-list [_] (list "<AssertType " (str type-sym) " " (str sym) ">"))

  FileLineInfo
  (file-name [_] (file-name type-sym))
  (line-number [_] (line-number type-sym)))

(defn assert-type [type-sym sym]
  (type-assertion type-sym sym empty-list))

(def Assertion (comp type-assertion
                     min-count-assertion))

(deftype assert-ast [assertion]
  (assert (instance? Assertion assertion))

  Stringable
  (string-list [_] (list "<Assert " (str assertion) ">"))

  AssertionTest
  (not-assertion? [_] nothing)

  FileLineInfo
  (file-name [_] (file-name assertion))
  (line-number [_] (line-number assertion)))

(defn assert-expr [assertion]
  (assert-ast assertion))


(deftype result-ast [sym assertion]
  ;; TODO
  ;; (assert (instance? Symbol sym))
  (assert (instance? Assertion assertion))

  Stringable
  (string-list [_] (list "<ResultAssertion " (str sym) " " (str assertion) ">"))
  
  AssertionTest
  (not-assertion? [_] nothing)

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn result-expr [sym assertion]
  (result-ast sym assertion))


(deftype prototype-ast [fn-name params doc default-body]
  (assert (instance? params-ast params))
  (assert (instance? block-comment-ast doc))
  (assert (instance? Vector default-body))

  Stringable
  (string-list [_] (list "<PrototypeFnAST " (str fn-name) ">"))

  FileLineInfo
  (file-name [_] (file-name fn-name))
  (line-number [_] (line-number fn-name)))

(defn prototype [fn-name args doc default-body]
  (prototype-ast fn-name args doc default-body))


(deftype protocol-ast [protocol-sym prototypes]
  ;; TODO
  ;; (assert (instance? Symbol protocol-sym))
  (assert (instance? Vector prototypes))

  Stringable
  (string-list [_] (list "<ProtocolAST " (str protocol-sym) ">"))

  FileLineInfo
  (file-name [_] (file-name protocol-sym))
  (line-number [_] (line-number protocol-sym)))

(defn protocol [sym prototypes]
  (protocol-ast sym prototypes))


(deftype extend-ast [type impls]
  ;; TODO
  ;; (assert (instance? Symbol type))
  (assert (instance? HashMap impls))

  Stringable
  (string-list [_] (list "<ExtendAST " (str type) ">"))

  FileLineInfo
  (file-name [_] (file-name type))
  (line-number [_] (line-number type)))

(defn type-extension [type impls]
 (extend-ast type (either (map (empty? impls) (fn [_] {}))
                          (apply comp (seq (filter impls (partial instance? HashMap)))))))


(deftype quoted-ast [q-val]
  Stringable
  (string-list [_]
    (list "'" (str q-val)))

  FileLineInfo
  (file-name [_] (file-name q-val))
  (line-number [_] (line-number q-val)))

(defn quoted [q-val]
  (quoted-ast q-val))


(deftype reify-ast [type-num impls]
  (assert (instance? Integer type-num))
  (assert (instance? HashMap impls))

  Stringable
  (string-list [_] (list "<Reify>"))

  FileLineInfo
  (file-name [_] (file-name impls))
  (line-number [_] (line-number impls)))

(defn reified [type-num impls]
  (reify-ast type-num impls))


(deftype type-ast [sym fields impls]
  ;; TODO
  ;; (assert (instance? Symbol sym))
  (assert (instance? params-ast fields))
  (assert (instance? Vector impls))

  Stringable
  (string-list [_] (list "<TypeAST " (str sym) ">"))

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn type-expr [sym fields impls]
  (type-ast sym fields impls))


(deftype module-ast [file-path]
  (assert (instance? String file-path)))

(defn module [file-path]
  (module-ast file-path))


(deftype git-dep-ast [repo file args]
  (assert (instance? String repo))
  (assert (instance? String file))
  (assert (instance? HashMap args))

  FileLineInfo
  (file-name [_] (file-name repo))
  (line-number [_] (line-number repo)))

(defn git-dep [repo file args]
  (git-dep-ast repo file args))


(deftype add-ns-ast [ns-sym mod]
  ;; TODO
  ;; (assert (instance? Symbol ns-sym))

  Stringable
  (string-list [_] (list "<AddNS " (str ns-sym) ">"))

  FileLineInfo
  (file-name [_] (file-name ns-sym))
  (line-number [_] (line-number ns-sym)))

(defn ns-add [ns mod]
  (add-ns-ast ns mod))

(deftype definition-ast [sym value-exprs]
  ;; TODO
  ;; (assert (instance? Symbol sym))

  Stringable
  (string-list [_] (list "<DefAST " (str sym) ">"))

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn definition [sym value]
  (definition-ast sym value))

