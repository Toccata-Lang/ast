
;; TODO: make constraints a recursive type when possible

(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "f8bb466"))

(defprotocol FileLoc
  (location [ast]
    c/no-loc))

(extend-type c/NoValues
  FileLoc
  (location [c]
    (location (.constraints c))))

(extend-type c/ValueConstraint
  FileLoc
  (location [c]
    (either (last (.path c))
            c/no-loc)))

(extend-type Vector
  FileLoc
  (location [v]
    (print-err 'wut _LINE_ v)
    (abort)
    (either (map (first v) location)
            c/no-loc)))

(extend-type c/fn-arity
  FileLoc
  (location [c]
    (location (.param-consts c))))

(extend-type c/NoTail
  FileLoc
  (location [_]
    c/no-loc))

(extend-type c/NoSymbol
  FileLoc
  (location [_]
    c/no-loc))

(deftype Annotated [ast annots]
  Stringable
  (string-list [_]
    (list "^" (str ast)))

  Container
  (map [a f]
    (.ast a (f ast)))

  (map [a f embed]
    (map (f ast) (partial .ast a)))

  FileLoc
  (location [_]
    (location ast)))

(defn annotated [ast]
  (Annotated ast 'annotations))

(def no-loc (c/Location "" 0))

(extend-type Symbol
  FileLoc
  (location [_]
    c/no-loc))

(extend-type HashMap
  FileLoc
  (location [m]
    (location (seq m))))

(extend-type Sequence
  FileLoc
  (location [v]
    (either (some v (fn [x]
                      (let [loc (location x)]
                        (cond (= loc no-loc)
                              nothing

                              (maybe loc)))))
            no-loc)))

(def result-sym (c/tag "#result"))

(deftype inline-ast [constraint txt loc var]
  (assert (instance? c/ValueConstraint constraint))
  (assert (instance? String txt))
  (assert (instance? c/Location loc))

  Stringable
  (string-list [_]
    (list "(inline " (str constraint) " \"" txt "\")"))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x))

  FileLoc
  (location [_] loc))

(defn inline [txt constraint path-to-file line-num]
  (inline-ast txt constraint (c/Location path-to-file line-num) ""))

(defprotocol ParamsProto
  (all-symbols [ast]
    (assert-result l (instance? Vector l))

    ;; how to use
    ;; (cata all-symbols (.fields ast))
    []))

(extend-type c/TaggedSymbol
  FileLoc
  (location [s]
    (.loc s))

  ParamsProto
  (all-symbols [ast]
    [ast]))

(deftype params-ast [fixed variadic var constraint]
  (assert (instance? (vector-of (any-of c/TaggedSymbol
                                        params-ast))
                     fixed))
  ;; (assert (instance? (any-of params-ast
  ;;                            c/OptionalSym)
  ;;                    variadic))

  Stringable
  (string-list [_]
    (comp (list "[")
          (flat-map (interpose fixed " ") string-list)
          (cond (= c/no-symbol variadic)
                empty-list

                (cons " & " (string-list variadic)))
          (list "]")
          ;; (list " <" (str fixed) " " (str variadic) ">")
          ))

  Container
  (map [x f]
    (params-ast (map fixed f) (f variadic) var constraint))

  (map [x f embed]
    (for [new-fixed (map fixed f embed)
          new-var (f variadic)]
      (params-ast new-fixed new-var var constraint)))

  Collection
  (count [_] (count fixed))

  ParamsProto
  (all-symbols [params]
    (comp* (.variadic params)
           (seq (.fixed params))))

  FileLoc
  (location [_]
    (either (map (first fixed) location)
            (location variadic))))

(def ParamType (any-of c/TaggedSymbol
                       params-ast))

(defn params
  ([fixed] (params-ast fixed c/no-symbol "" c/top-type))
  ([fixed variadic]
   (assert (instance? c/OptionalSym variadic))
   (params-ast fixed variadic "" c/top-type)))

(defn all-syms [params]
  (assert (instance? ParamType params))

  (cata all-symbols params))

(deftype definition-ast [sym value-exprs]
  (assert (instance? c/TaggedSymbol sym))
  (assert (instance? Vector value-exprs))

  Stringable
  (string-list [_]
    (comp (list "(def " (str sym) "\n")
          (interpose (map value-exprs str) "\n")
          (list ")")))

  Container
  (map [x f]
    (definition-ast sym (map value-exprs f)))

  (map [x f embed]
    (map (map (vec value-exprs) f embed)
         (partial definition-ast sym)))

  FileLoc
  (location [_] (location sym)))

(defn definition [sym value]
  (definition-ast sym value))

(deftype fn-arity-ast [fn-sym arity-id params doc body var constraint]
  ;; body min count 1
  (assert (instance? c/OptionalSym fn-sym))
  (assert (instance? (any-of c/AllValues c/fn-arity) constraint))

  Stringable
  (string-list [_]
    (comp (list "(fn " (str fn-sym) " ")
          (string-list params)
          (list "\n")
          (flat-map (interpose body "\n") string-list)
          (list ")\n")))

  ;; (string-list [_]
  ;;   (list "(ast/fn-arity-ast "
  ;;         (str "'" fn-sym) " "
  ;;         (str "'" fn-var) " "
  ;;         (str params) "\n"
  ;;         (str "\"" doc "\"") "\n"
  ;;         (str body) " "
  ;;         ")"))

  Container
  (map [x f]
    (-> x
        (.params (f params))
        (.body (map body f))))

  (map [x f embed]
    (for [new-params (f params)
          new-body (map body f embed)]
      (-> x
          (.params new-params)
          (.body new-body))))

  FileLoc
  (location [_]
    (cond (instance? c/TaggedSymbol fn-sym)
          (location fn-sym)

          (either (or (map (first (.fixed params))
                           location)
                      (map (first body)
                           location))
                  (location fn-sym)))))

(defn fn-arity
  ([params doc body]
   (fn-arity (c/tag "") params doc (either (instance? Vector body)
                                           [body])))
  ([fn-sym params doc body]
   (fn-arity-ast fn-sym c/no-symbol params doc (either (instance? Vector body)
                                                       [body])
                 "" c/top-type)))

(deftype integer-ast [int loc var constraint]
  (assert (instance? Integer int))
  (assert (instance? c/Location loc))
  ;; TODO: remove the 'var' field
  (assert (instance? String var))
  (assert (instance? c/IntegerConstraint constraint))

  Stringable
  (string-list [_] (list (str int)))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x))

  FileLoc
  (location [_] loc))

(deftype string-ast [string loc var constraint]
  (assert (instance? String string))
  (assert (instance? String var))
  (assert (instance? c/Location loc))

  Stringable
  (string-list [_] (list "\"" string "\""))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x))

  FileLoc
  (location [_] loc))

;; TODO: remove 'constraint' and see what breaks
(deftype block-comment-ast [lines loc constraint]
  (assert (instance? (vector-of String) lines))
  (assert (instance? c/Location loc))

  Stringable
  (string-list [_] (comp (list "<BlockCommentAST")
                         (interpose lines "\n")
                         (list ">")))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x))

  FileLoc
  (location [_] loc))

(defn block-comment [path-to-file line-num lines]
  (block-comment-ast (vec lines) (c/Location path-to-file line-num) c/top-type))

(deftype reify-ast [type-num impls var constraint]
  (assert (instance? c/OptionalInt type-num))
  (assert (instance? Vector impls))
  (assert (instance? String var))

  Stringable
  (string-list [_] (list "(reify " (str type-num " \n" impls) ")"))

  Container
  (map [x f]
    (.impls x (map impls f)))

  (map [x f embed]
    (for [new-impls (map impls f embed)]
      (.impls x new-impls)))

  FileLoc
  (location [_] (location impls)))

(defn reified [type-num impls]
  (reify-ast type-num impls "" c/top-type))

(deftype call-ast [call-target args var constraint]
  (assert (instance? Vector args))

  Stringable
  (string-list [_]
    (comp (list "(" (str call-target) " ")
          (flat-map (interpose (seq args) " ") string-list)
          (list ")")))

  Container
  (map [x f]
    (call-ast (f call-target) (map args f) var constraint))

  (map [x f embed]
    (for [new-target (f call-target)
          new-args (map args f embed)]
      (call-ast new-target new-args var constraint)))

  FileLoc
  (location [_]
    (cond (instance? c/TaggedSymbol call-target)
          (location call-target)

          (first args)
          (location args)

          (location call-target))))

(defn call-expr [[target & args]]
  (call-ast target (vec args) "" c/top-type))

(deftype quoted-ast [q-val var constraint]
  Stringable
  (string-list [_]
    (list (str "'" q-val)))

  Ord
  (<* [x y]
    (assert (instance? quoted-ast y))
    (and (< q-val (.q-val x))
         (maybe x)))

  Container
  (map [x f]
    (quoted-ast (f q-val) var constraint))

  (map [x f embed]
    (for [new-v (f q-val)]
      (quoted-ast new-v var constraint)))

  FileLoc
  (location [_] (location q-val)))

(defn quoted [q-val]
  (quoted-ast q-val "" c/top-type))

(defprotocol IsCode
  (generates-code? [x]))

(extend-type Annotated
  IsCode
  (generates-code? [a]
    (generates-code? (.ast a))))

(deftype TypeReturned [assertion]
  Stringable
  (string-list [_] (list "(ast/TypeReturned " (str assertion) ")"))

  Container
  (map [x f]
    (.assertion x (f assertion)))

  (map [x f embed]
    (-> assertion
        f
        (map (partial .assertion x))))

  Eq
  (=* [x y]
    (and (instance? TypeReturned y)
         (=* assertion (.assertion y))
         (maybe x))))

(def NoCode (any-of TypeReturned
                    block-comment-ast
                    c/ValueConstraint))

(extend-type NoCode
  IsCode
  (generates-code? [_]
    nothing))

(deftype declaration-ast [sym]
  (assert (instance? c/TaggedSymbol sym))

  Stringable
  (string-list [_] (list "<DeclareAST " (str sym) ">"))

  Container
  (map [x f]
    x)

  (map [x f embed]
    (embed x))

  FileLoc
  (location [_] (location sym)))

(defn declare [sym]
  (declaration-ast sym))

(deftype prototype-ast [fn-name params doc default-body impls var constraint]
  (assert (instance? c/TaggedSymbol fn-name))
  (assert (instance? params-ast params))
  (assert (instance? block-comment-ast doc))
  (assert (instance? Vector default-body))
  (assert (instance? HashMap impls))
  (assert (instance? String var))
  (assert (instance? (any-of c/AllValues c/ProtoImpls) constraint))

  Stringable
  (string-list [_] (comp (list "(" (str fn-name) " ")
                         (string-list params)
                         (list "\n")
                         (flat-map (interpose default-body "\n") string-list)
                         ")"))

  Container
  (map [x f]
    (-> x
        (.params (map params f))
        (.default-body (map default-body f))))

  (map [x f embed]
    (for [new-params (map params f embed)
          new-body (map default-body f embed)]
      (-> x
          (.params new-params)
          (.default-body new-body))))

  FileLoc
  (location [_] (location fn-name)))

(defn prototype [fn-name args doc default-body]
  (prototype-ast fn-name args doc default-body {} "" c/top-type))

(deftype extend-ast [type impls]
  (assert (instance? c/TaggedSymbol type))
  (assert (instance? Vector impls))

  Stringable
  (string-list [_] (list "(extend-type " (str type)
                         "\n" (to-str (interpose impls "\n"))
                         ")"))

  Container
  (map [x f]
    (.impls x (map-vals impls f)))

  (map [x f embed]
    (map (map impls f embed)
         (partial .impls x)))

  FileLoc
  (location [_] (location type)))

;; TODO: make threading into either, and, or possible
(deftype either-ast [clause alt var constraint]
  (assert (instance? String var))

  Stringable
  (string-list [_]
    (comp (list "(either ")
          (string-list clause)
          (list "\n")
          (string-list alt)
          (list ")")))

  Container
  (map [x f]
    (either-ast (f clause)
                (f alt)
                var
                constraint))

  (map [x f embed]
    (for [new-clause (f clause)
          new-alt (f alt)]
      (either-ast new-clause new-alt var constraint)))

  FileLoc
  (location [_] (location clause)))

(defn either-expr [clause alt]
  (either-ast clause alt "" c/top-type))

(defn do-expr [body]
  (call-expr [(fn-arity (params-ast [] c/no-symbol "" c/top-type)
                        (block-comment-ast [] c/no-loc c/top-type)
                        body)]))

(deftype binding-ast [binding val cont var constraint]
  ;; cont min count 1
  (assert (instance? String var))
  (assert (instance? Vector cont))

  Stringable
  (string-list [_]
    (list (str binding) " " (str val)
          "\n" (str cont)))

  Container
  (map [x f]
    (binding-ast (f binding) (f val) (map cont f) var constraint))

  (map [x f embed]
    (for [new-val (f val)
          new-binding (f binding)
          new-cont (map cont f embed)]
      (binding-ast new-binding new-val new-cont var constraint)))

  FileLoc
  (location [_] (location binding)))

(defn binding [binding val]
  (binding-ast (params [binding]) val [] "" c/top-type))

(defn let-expr [bindings body]
  (-> (reverse bindings)
      (reduce body (fn [cont binding]
                     (call-expr [(fn-arity (.binding binding)
                                           (block-comment-ast [] c/no-loc c/top-type)
                                           cont)
                                 (.val binding)])))))

(deftype and-ast [clause cont var constraint]
  (assert (instance? String var))

  Stringable
  (string-list [_]
    (comp (list "(and " (str clause) "\n")
          (string-list cont)
          (list ")")))

  Container
  (map [x f]
    (-> x
        (.clause (f clause))
        (.cont (f cont))))

  (map [x f embed]
    (for [new-clause (f clause)
          new-cont (f cont)]
      (-> x
          (.clause new-clause)
          (.cont new-cont))))

  FileLoc
  (location [_]
    (location clause)))

(defn and-expr [clauses]
  (let [clauses (reverse clauses)]
    (reduce (rest clauses)
            (either (first clauses)
                    (c/tag 'nothing))
            (fn [cont clause]
              (and-ast clause cont "" c/maybe-constraint)))))

(deftype cond-ast [clause value cont var constraint]
  (assert (instance? String var))

  Stringable
  (string-list [_]
    (list "(cond " (str clause) "\n"
          (str value) "\n"
          (str cont)
          ")"))

  Container
  (map [x f]
    (-> x
        (.clause (f clause))
        (.value (f value))
        (.cont (f cont))))

  (map [x f embed]
    (for [new-clause (f clause)
          new-value (f value)
          new-cont (f cont)]
      (-> x
          (.clause new-clause)
          (.value new-value)
          (.cont new-cont))))

  FileLoc
  (location [_]
    (location clause)))

(defn cond-val-expr [clause value]
  (cond-ast clause value (c/tag '_) "" c/top-type))

(defn cond-expr [clause-vals default]
  (reduce (reverse clause-vals)
          default
          (fn [cont clause-val]
            (cond (instance? binding-ast clause-val)
                  (.cont clause-val [cont])
                  (.cont clause-val cont)))))

(deftype or-ast [clause cont var constraint]
  (assert (instance? String var))

  Stringable
  (string-list [_]
    (comp (list "(or " (str clause) "\n")
          (string-list cont)
          (list ")")))

  Container
  (map [x f]
    (-> x
        (.clause (f clause))
        (.cont (f cont))))

  (map [x f embed]
    (for [new-clause (f clause)
          new-cont (f cont)]
      (-> x
          (.clause new-clause)
          (.cont new-cont))))

  FileLoc
  (location [_]
    (location clause)))

(defn or-expr [clauses]
  (let [clauses (reverse clauses)]
    (reduce (rest clauses)
            (either (first clauses)
                    (c/tag 'nothing))
            (fn [cont clause]
              (or-ast clause cont "" c/maybe-constraint)))))



(deftype IsType [ast expected]
  Stringable
  (string-list [x]
    (list "(ast/IsType " (str ast) " " (str expected) ")"))

  Container
  (map [x f]
       (.ast x (f ast)))

  (map [x f embed]
       (map (f ast)
            (partial .ast x)))

  FileLoc
  (location [_]
    (location ast)))

(deftype GetImpl [impl-sym type-sym constraint]
  Stringable
  (string-list [x]
    (list "(ast/GetImpl " (str impl-sym) " " (str type-sym) ")"))

  FileLoc
  (location [_]
    (location impl-sym))

  Container
  (map [x f]
    (GetImpl (f impl-sym) type-sym (f constraint)))

  (map [x f embed]
    (for [new-impl (f impl-sym)
          new-c (f constraint)]
      (GetImpl new-impl type-sym new-c))))

(deftype type-ast [sym fields impls]
  (assert (instance? c/TaggedSymbol sym))
  (assert (instance? (any-of c/NoFields params-ast) fields))
  (assert (instance? Vector impls))

  Stringable
  (string-list [_] (list "<TypeAST " (str sym) " " (str fields) "\n"
                         (str impls) ">"))

  Container
  (map [x f]
    (-> x
        (.fields (map fields f))
        (.impls (map impls f))))

  (map [x f embed]
    (for [new-fields (map fields f embed)
          new-impls (map impls f embed)]
      (-> x
          (.fields new-fields)
          (.impls new-impls))))

  FileLoc
  (location [_] (location sym)))

(defn type-expr [sym fields impls]
  (type-ast sym fields impls))

(deftype rec-type-ast [sym types]
  (assert (instance? (vector-of type-ast) types))

  Stringable
  (string-list [_]
    (list "(ast/rec-type-ast " (str sym "\n" types) ")"))

  FileLoc
  (location [_]
    (location sym)))

(def main (c/tag 'main))

(defn main-fn [params body]
  (definition (c/tag main (location params))
    [(.constraint (fn-arity params
                            (block-comment-ast [] c/no-loc c/top-type)
                            body)
                  (c/arity main
                           (c/list-c [(c/vect-c [c/string-constraint])])
                           c/top-type))]))

(def AST (any-of params-ast
                 definition-ast
                 binding-ast
                 fn-arity-ast
                 integer-ast
                 string-ast
                 reify-ast
                 call-ast
                 quoted-ast
                 prototype-ast
                 and-ast
                 cond-ast
                 or-ast
                 inline-ast
                 ))
